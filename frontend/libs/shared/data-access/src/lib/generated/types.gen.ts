// This file is auto-generated by @hey-api/openapi-ts

export type ContentFieldDto = {
	id: string
	name: string
	label: string
	type: FieldType
	isRequired?: boolean
}

export type ContentTypeDto = {
	id: string
	name: string
	kind: ContentTypeKind
	fields: Array<ContentFieldDto>
}

export const ContentTypeKind = {
	Singleton: 'singleton',
	Collection: 'collection',
} as const

export type ContentTypeKind = (typeof ContentTypeKind)[keyof typeof ContentTypeKind]

export type CreateContentFieldDto = {
	name: string
	label: string
	type: FieldType
	isRequired?: boolean
}

export type CreateContentTypeDto = {
	name: string
	kind: ContentTypeKind
	fields?: Array<CreateContentFieldDto>
}

export const FieldType = {
	ShortText: 'shortText',
	LongText: 'longText',
	Integer: 'integer',
	Decimal: 'decimal',
	Boolean: 'boolean',
} as const

export type FieldType = (typeof FieldType)[keyof typeof FieldType]

export const NullableOfContentTypeKind = {
	Singleton: 'singleton',
	Collection: 'collection',
	Null: null,
} as const

export type NullableOfContentTypeKind = (typeof NullableOfContentTypeKind)[keyof typeof NullableOfContentTypeKind]

export const NullableOfFieldType = {
	ShortText: 'shortText',
	LongText: 'longText',
	Integer: 'integer',
	Decimal: 'decimal',
	Boolean: 'boolean',
	Null: null,
} as const

export type NullableOfFieldType = (typeof NullableOfFieldType)[keyof typeof NullableOfFieldType]

export type ProblemDetails = {
	type?: string | null
	title?: string | null
	status?: number | null
	detail?: string | null
	instance?: string | null
}

export type UpdateContentFieldDto = {
	name: string | null
	label: string | null
	type?: NullableOfFieldType
	isRequired?: boolean | null
}

export type UpdateContentTypeDto = {
	name?: string | null
	kind?: NullableOfContentTypeKind
}

export type ValidationProblemDetails = {
	type?: string | null
	title?: string | null
	status?: number | null
	detail?: string | null
	instance?: string | null
	errors?: {
		[key: string]: Array<string>
	}
}

export type GetContentEntriesByNameData = {
	body?: never
	path: {
		name: string
	}
	query?: never
	url: '/content-entries/{name}'
}

export type GetContentEntriesByNameErrors = {
	/**
	 * Bad Request
	 */
	400: ValidationProblemDetails
	/**
	 * Unauthorized
	 */
	401: ProblemDetails
	/**
	 * Forbidden
	 */
	403: ProblemDetails
	/**
	 * Unprocessable Entity
	 */
	422: ValidationProblemDetails
}

export type GetContentEntriesByNameError = GetContentEntriesByNameErrors[keyof GetContentEntriesByNameErrors]

export type GetContentEntriesByNameResponses = {
	/**
	 * OK
	 */
	200: Array<{
		[key: string]: unknown
	}>
}

export type GetContentEntriesByNameResponse = GetContentEntriesByNameResponses[keyof GetContentEntriesByNameResponses]

export type PostContentEntriesByNameData = {
	body: {
		[key: string]: unknown
	}
	path: {
		name: string
	}
	query?: never
	url: '/content-entries/{name}'
}

export type PostContentEntriesByNameErrors = {
	/**
	 * Bad Request
	 */
	400: ValidationProblemDetails
	/**
	 * Unauthorized
	 */
	401: ProblemDetails
	/**
	 * Forbidden
	 */
	403: ProblemDetails
	/**
	 * Conflict
	 */
	409: ValidationProblemDetails
	/**
	 * Unprocessable Entity
	 */
	422: ValidationProblemDetails
}

export type PostContentEntriesByNameError = PostContentEntriesByNameErrors[keyof PostContentEntriesByNameErrors]

export type PostContentEntriesByNameResponses = {
	/**
	 * OK
	 */
	200: {
		[key: string]: unknown
	}
}

export type PostContentEntriesByNameResponse =
	PostContentEntriesByNameResponses[keyof PostContentEntriesByNameResponses]

export type GetContentTypesData = {
	body?: never
	path?: never
	query?: {
		kind?: string
	}
	url: '/content-types'
}

export type GetContentTypesErrors = {
	/**
	 * Bad Request
	 */
	400: ValidationProblemDetails
	/**
	 * Unauthorized
	 */
	401: ProblemDetails
	/**
	 * Forbidden
	 */
	403: ProblemDetails
	/**
	 * Unprocessable Entity
	 */
	422: ValidationProblemDetails
}

export type GetContentTypesError = GetContentTypesErrors[keyof GetContentTypesErrors]

export type GetContentTypesResponses = {
	/**
	 * OK
	 */
	200: Array<ContentTypeDto>
}

export type GetContentTypesResponse = GetContentTypesResponses[keyof GetContentTypesResponses]

export type PostContentTypesData = {
	body: CreateContentTypeDto
	path?: never
	query?: never
	url: '/content-types'
}

export type PostContentTypesErrors = {
	/**
	 * Bad Request
	 */
	400: ValidationProblemDetails
	/**
	 * Unauthorized
	 */
	401: ProblemDetails
	/**
	 * Forbidden
	 */
	403: ProblemDetails
	/**
	 * Conflict
	 */
	409: ValidationProblemDetails
	/**
	 * Unprocessable Entity
	 */
	422: ValidationProblemDetails
}

export type PostContentTypesError = PostContentTypesErrors[keyof PostContentTypesErrors]

export type PostContentTypesResponses = {
	/**
	 * OK
	 */
	200: ContentTypeDto
}

export type PostContentTypesResponse = PostContentTypesResponses[keyof PostContentTypesResponses]

export type DeleteContentTypesByIdData = {
	body?: never
	path: {
		id: string
	}
	query?: never
	url: '/content-types/{id}'
}

export type DeleteContentTypesByIdErrors = {
	/**
	 * Bad Request
	 */
	400: ValidationProblemDetails
	/**
	 * Unauthorized
	 */
	401: ProblemDetails
	/**
	 * Forbidden
	 */
	403: ProblemDetails
	/**
	 * Not Found
	 */
	404: ProblemDetails
}

export type DeleteContentTypesByIdError = DeleteContentTypesByIdErrors[keyof DeleteContentTypesByIdErrors]

export type DeleteContentTypesByIdResponses = {
	/**
	 * OK
	 */
	200: ContentTypeDto
}

export type DeleteContentTypesByIdResponse = DeleteContentTypesByIdResponses[keyof DeleteContentTypesByIdResponses]

export type GetContentTypesByIdData = {
	body?: never
	path: {
		id: string
	}
	query?: never
	url: '/content-types/{id}'
}

export type GetContentTypesByIdErrors = {
	/**
	 * Bad Request
	 */
	400: ValidationProblemDetails
	/**
	 * Unauthorized
	 */
	401: ProblemDetails
	/**
	 * Forbidden
	 */
	403: ProblemDetails
	/**
	 * Not Found
	 */
	404: ProblemDetails
	/**
	 * Unprocessable Entity
	 */
	422: ValidationProblemDetails
}

export type GetContentTypesByIdError = GetContentTypesByIdErrors[keyof GetContentTypesByIdErrors]

export type GetContentTypesByIdResponses = {
	/**
	 * OK
	 */
	200: ContentTypeDto
}

export type GetContentTypesByIdResponse = GetContentTypesByIdResponses[keyof GetContentTypesByIdResponses]

export type PatchContentTypesByIdData = {
	body: UpdateContentTypeDto
	path: {
		id: string
	}
	query?: never
	url: '/content-types/{id}'
}

export type PatchContentTypesByIdErrors = {
	/**
	 * Bad Request
	 */
	400: ValidationProblemDetails
	/**
	 * Unauthorized
	 */
	401: ProblemDetails
	/**
	 * Forbidden
	 */
	403: ProblemDetails
	/**
	 * Not Found
	 */
	404: ProblemDetails
	/**
	 * Conflict
	 */
	409: ValidationProblemDetails
	/**
	 * Unprocessable Entity
	 */
	422: ValidationProblemDetails
}

export type PatchContentTypesByIdError = PatchContentTypesByIdErrors[keyof PatchContentTypesByIdErrors]

export type PatchContentTypesByIdResponses = {
	/**
	 * OK
	 */
	200: ContentTypeDto
}

export type PatchContentTypesByIdResponse = PatchContentTypesByIdResponses[keyof PatchContentTypesByIdResponses]

export type GetContentTypesByNameData = {
	body?: never
	path: {
		name: string
	}
	query?: never
	url: '/content-types/{name}'
}

export type GetContentTypesByNameErrors = {
	/**
	 * Bad Request
	 */
	400: ValidationProblemDetails
	/**
	 * Unauthorized
	 */
	401: ProblemDetails
	/**
	 * Forbidden
	 */
	403: ProblemDetails
	/**
	 * Not Found
	 */
	404: ProblemDetails
	/**
	 * Unprocessable Entity
	 */
	422: ValidationProblemDetails
}

export type GetContentTypesByNameError = GetContentTypesByNameErrors[keyof GetContentTypesByNameErrors]

export type GetContentTypesByNameResponses = {
	/**
	 * OK
	 */
	200: ContentTypeDto
}

export type GetContentTypesByNameResponse = GetContentTypesByNameResponses[keyof GetContentTypesByNameResponses]

export type PostContentTypesByIdFieldsData = {
	body: CreateContentFieldDto
	path: {
		id: string
	}
	query?: never
	url: '/content-types/{id}/fields'
}

export type PostContentTypesByIdFieldsErrors = {
	/**
	 * Bad Request
	 */
	400: ValidationProblemDetails
	/**
	 * Unauthorized
	 */
	401: ProblemDetails
	/**
	 * Forbidden
	 */
	403: ProblemDetails
	/**
	 * Not Found
	 */
	404: ProblemDetails
	/**
	 * Conflict
	 */
	409: ValidationProblemDetails
	/**
	 * Unprocessable Entity
	 */
	422: ValidationProblemDetails
}

export type PostContentTypesByIdFieldsError = PostContentTypesByIdFieldsErrors[keyof PostContentTypesByIdFieldsErrors]

export type PostContentTypesByIdFieldsResponses = {
	/**
	 * OK
	 */
	200: ContentFieldDto
}

export type PostContentTypesByIdFieldsResponse =
	PostContentTypesByIdFieldsResponses[keyof PostContentTypesByIdFieldsResponses]

export type DeleteContentTypesByIdFieldsByFieldIdData = {
	body?: never
	path: {
		id: string
		fieldId: string
	}
	query?: never
	url: '/content-types/{id}/fields/{fieldId}'
}

export type DeleteContentTypesByIdFieldsByFieldIdErrors = {
	/**
	 * Bad Request
	 */
	400: ValidationProblemDetails
	/**
	 * Unauthorized
	 */
	401: ProblemDetails
	/**
	 * Forbidden
	 */
	403: ProblemDetails
	/**
	 * Not Found
	 */
	404: ProblemDetails
}

export type DeleteContentTypesByIdFieldsByFieldIdError =
	DeleteContentTypesByIdFieldsByFieldIdErrors[keyof DeleteContentTypesByIdFieldsByFieldIdErrors]

export type DeleteContentTypesByIdFieldsByFieldIdResponses = {
	/**
	 * OK
	 */
	200: ContentFieldDto
}

export type DeleteContentTypesByIdFieldsByFieldIdResponse =
	DeleteContentTypesByIdFieldsByFieldIdResponses[keyof DeleteContentTypesByIdFieldsByFieldIdResponses]

export type PatchContentTypesByIdFieldsByFieldIdData = {
	body: UpdateContentFieldDto
	path: {
		id: string
		fieldId: string
	}
	query?: never
	url: '/content-types/{id}/fields/{fieldId}'
}

export type PatchContentTypesByIdFieldsByFieldIdErrors = {
	/**
	 * Bad Request
	 */
	400: ValidationProblemDetails
	/**
	 * Unauthorized
	 */
	401: ProblemDetails
	/**
	 * Forbidden
	 */
	403: ProblemDetails
	/**
	 * Not Found
	 */
	404: ProblemDetails
	/**
	 * Conflict
	 */
	409: ValidationProblemDetails
	/**
	 * Unprocessable Entity
	 */
	422: ValidationProblemDetails
}

export type PatchContentTypesByIdFieldsByFieldIdError =
	PatchContentTypesByIdFieldsByFieldIdErrors[keyof PatchContentTypesByIdFieldsByFieldIdErrors]

export type PatchContentTypesByIdFieldsByFieldIdResponses = {
	/**
	 * OK
	 */
	200: ContentFieldDto
}

export type PatchContentTypesByIdFieldsByFieldIdResponse =
	PatchContentTypesByIdFieldsByFieldIdResponses[keyof PatchContentTypesByIdFieldsByFieldIdResponses]

export type ClientOptions = {
	baseUrl: 'http://localhost:5139/' | (string & {})
}
